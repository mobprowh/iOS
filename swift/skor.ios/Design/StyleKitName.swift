//
//  StyleKitName.swift
//  ProjectName
//
//  Created by AuthorName on 12/12/2016.
//  Copyright Â© 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class StyleKitName : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 125), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 125), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 125)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 0.983, blue: 0.041, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.077, blue: 0.998, alpha: 1.000)
        let strokeColor = UIColor(red: 0.878, green: 0.878, blue: 0.882, alpha: 1.000)

        //// path4195 Drawing
        let path4195Path = UIBezierPath()
        path4195Path.move(to: CGPoint(x: 50.31, y: 28.09))
        path4195Path.addLine(to: CGPoint(x: 50.37, y: 12.78))
        path4195Path.addLine(to: CGPoint(x: 51.78, y: 12.63))
        path4195Path.addCurve(to: CGPoint(x: 59, y: 8.53), controlPoint1: CGPoint(x: 54.42, y: 12.34), controlPoint2: CGPoint(x: 57.03, y: 10.86))
        path4195Path.addCurve(to: CGPoint(x: 61.92, y: 3.86), controlPoint1: CGPoint(x: 59.83, y: 7.55), controlPoint2: CGPoint(x: 62.05, y: 4.01))
        path4195Path.addCurve(to: CGPoint(x: 60.12, y: 4.36), controlPoint1: CGPoint(x: 61.9, y: 3.83), controlPoint2: CGPoint(x: 61.09, y: 4.06))
        path4195Path.addCurve(to: CGPoint(x: 52.44, y: 5.8), controlPoint1: CGPoint(x: 57.78, y: 5.11), controlPoint2: CGPoint(x: 55.08, y: 5.61))
        path4195Path.addLine(to: CGPoint(x: 49.26, y: 5.96))
        path4195Path.addLine(to: CGPoint(x: 49.26, y: 4.67))
        path4195Path.addLine(to: CGPoint(x: 49.26, y: 3.37))
        path4195Path.addLine(to: CGPoint(x: 51.93, y: 3.21))
        path4195Path.addCurve(to: CGPoint(x: 62.65, y: 0.36), controlPoint1: CGPoint(x: 54.82, y: 2.94), controlPoint2: CGPoint(x: 60.12, y: 1.52))
        path4195Path.addLine(to: CGPoint(x: 63.42, y: 0))
        path4195Path.addLine(to: CGPoint(x: 64.88, y: 1.28))
        path4195Path.addCurve(to: CGPoint(x: 78.81, y: 9.51), controlPoint1: CGPoint(x: 69.54, y: 5.35), controlPoint2: CGPoint(x: 73.4, y: 7.63))
        path4195Path.addCurve(to: CGPoint(x: 87.25, y: 13.96), controlPoint1: CGPoint(x: 82.33, y: 10.72), controlPoint2: CGPoint(x: 85.38, y: 12.33))
        path4195Path.addCurve(to: CGPoint(x: 90.61, y: 18.71), controlPoint1: CGPoint(x: 88.31, y: 14.88), controlPoint2: CGPoint(x: 88.87, y: 15.67))
        path4195Path.addCurve(to: CGPoint(x: 98.5, y: 40.13), controlPoint1: CGPoint(x: 94.64, y: 25.72), controlPoint2: CGPoint(x: 97.24, y: 32.79))
        path4195Path.addCurve(to: CGPoint(x: 99.51, y: 44.69), controlPoint1: CGPoint(x: 98.79, y: 41.78), controlPoint2: CGPoint(x: 99.24, y: 43.83))
        path4195Path.addLine(to: CGPoint(x: 100, y: 46.25))
        path4195Path.addLine(to: CGPoint(x: 98.29, y: 48.11))
        path4195Path.addCurve(to: CGPoint(x: 83.9, y: 56.89), controlPoint1: CGPoint(x: 94.59, y: 52.16), controlPoint2: CGPoint(x: 89.55, y: 55.23))
        path4195Path.addCurve(to: CGPoint(x: 81.69, y: 57.48), controlPoint1: CGPoint(x: 82.81, y: 57.21), controlPoint2: CGPoint(x: 81.82, y: 57.48))
        path4195Path.addCurve(to: CGPoint(x: 79.99, y: 53.51), controlPoint1: CGPoint(x: 81.49, y: 57.48), controlPoint2: CGPoint(x: 80.61, y: 55.44))
        path4195Path.addCurve(to: CGPoint(x: 78.21, y: 49.45), controlPoint1: CGPoint(x: 79.6, y: 52.3), controlPoint2: CGPoint(x: 78.41, y: 49.6))
        path4195Path.addCurve(to: CGPoint(x: 75.53, y: 77.56), controlPoint1: CGPoint(x: 77.7, y: 49.09), controlPoint2: CGPoint(x: 76.11, y: 65.71))
        path4195Path.addCurve(to: CGPoint(x: 75.74, y: 98.75), controlPoint1: CGPoint(x: 75.26, y: 83.12), controlPoint2: CGPoint(x: 75.4, y: 96.88))
        path4195Path.addCurve(to: CGPoint(x: 76.76, y: 102.25), controlPoint1: CGPoint(x: 75.87, y: 99.42), controlPoint2: CGPoint(x: 76.32, y: 101))
        path4195Path.addCurve(to: CGPoint(x: 80.2, y: 118.93), controlPoint1: CGPoint(x: 78.6, y: 107.58), controlPoint2: CGPoint(x: 80.19, y: 115.29))
        path4195Path.addLine(to: CGPoint(x: 80.2, y: 120.96))
        path4195Path.addLine(to: CGPoint(x: 78.83, y: 121.41))
        path4195Path.addCurve(to: CGPoint(x: 54.16, y: 124.85), controlPoint1: CGPoint(x: 72.95, y: 123.37), controlPoint2: CGPoint(x: 65.54, y: 124.4))
        path4195Path.addLine(to: CGPoint(x: 49.26, y: 125))
        path4195Path.addCurve(to: CGPoint(x: 50.31, y: 28.09), controlPoint1: CGPoint(x: 48.72, y: 92.28), controlPoint2: CGPoint(x: 50.16, y: 55.99))
        path4195Path.addLine(to: CGPoint(x: 50.31, y: 28.09))
        path4195Path.close()
        fillColor.setFill()
        path4195Path.fill()
        strokeColor.setStroke()
        path4195Path.lineWidth = 0.5
        path4195Path.miterLimit = 4
        path4195Path.stroke()


        //// path Drawing
        let pathPath = UIBezierPath()
        pathPath.move(to: CGPoint(x: 50.69, y: 28.09))
        pathPath.addLine(to: CGPoint(x: 50.63, y: 12.78))
        pathPath.addLine(to: CGPoint(x: 48.22, y: 12.63))
        pathPath.addCurve(to: CGPoint(x: 41, y: 8.53), controlPoint1: CGPoint(x: 45.58, y: 12.34), controlPoint2: CGPoint(x: 42.97, y: 10.86))
        pathPath.addCurve(to: CGPoint(x: 38.08, y: 3.86), controlPoint1: CGPoint(x: 40.17, y: 7.55), controlPoint2: CGPoint(x: 37.95, y: 4.01))
        pathPath.addCurve(to: CGPoint(x: 39.88, y: 4.36), controlPoint1: CGPoint(x: 38.1, y: 3.83), controlPoint2: CGPoint(x: 38.91, y: 4.06))
        pathPath.addCurve(to: CGPoint(x: 47.56, y: 5.8), controlPoint1: CGPoint(x: 42.22, y: 5.11), controlPoint2: CGPoint(x: 44.92, y: 5.61))
        pathPath.addLine(to: CGPoint(x: 49.74, y: 5.96))
        pathPath.addLine(to: CGPoint(x: 49.74, y: 4.67))
        pathPath.addLine(to: CGPoint(x: 49.74, y: 3.37))
        pathPath.addLine(to: CGPoint(x: 48.07, y: 3.21))
        pathPath.addCurve(to: CGPoint(x: 37.35, y: 0.36), controlPoint1: CGPoint(x: 45.18, y: 2.94), controlPoint2: CGPoint(x: 39.88, y: 1.52))
        pathPath.addLine(to: CGPoint(x: 36.58, y: 0))
        pathPath.addLine(to: CGPoint(x: 35.12, y: 1.28))
        pathPath.addCurve(to: CGPoint(x: 21.19, y: 9.51), controlPoint1: CGPoint(x: 30.46, y: 5.35), controlPoint2: CGPoint(x: 26.6, y: 7.63))
        pathPath.addCurve(to: CGPoint(x: 12.75, y: 13.96), controlPoint1: CGPoint(x: 17.67, y: 10.72), controlPoint2: CGPoint(x: 14.62, y: 12.33))
        pathPath.addCurve(to: CGPoint(x: 9.39, y: 18.71), controlPoint1: CGPoint(x: 11.69, y: 14.88), controlPoint2: CGPoint(x: 11.13, y: 15.67))
        pathPath.addCurve(to: CGPoint(x: 1.5, y: 40.13), controlPoint1: CGPoint(x: 5.36, y: 25.72), controlPoint2: CGPoint(x: 2.76, y: 32.79))
        pathPath.addCurve(to: CGPoint(x: 0.49, y: 44.69), controlPoint1: CGPoint(x: 1.21, y: 41.78), controlPoint2: CGPoint(x: 0.76, y: 43.83))
        pathPath.addLine(to: CGPoint(x: 0, y: 46.25))
        pathPath.addLine(to: CGPoint(x: 1.71, y: 48.11))
        pathPath.addCurve(to: CGPoint(x: 16.1, y: 56.89), controlPoint1: CGPoint(x: 5.41, y: 52.16), controlPoint2: CGPoint(x: 10.45, y: 55.23))
        pathPath.addCurve(to: CGPoint(x: 18.31, y: 57.48), controlPoint1: CGPoint(x: 17.19, y: 57.21), controlPoint2: CGPoint(x: 18.18, y: 57.48))
        pathPath.addCurve(to: CGPoint(x: 20.01, y: 53.51), controlPoint1: CGPoint(x: 18.51, y: 57.48), controlPoint2: CGPoint(x: 19.39, y: 55.44))
        pathPath.addCurve(to: CGPoint(x: 21.79, y: 49.45), controlPoint1: CGPoint(x: 20.4, y: 52.3), controlPoint2: CGPoint(x: 21.59, y: 49.6))
        pathPath.addCurve(to: CGPoint(x: 24.47, y: 77.56), controlPoint1: CGPoint(x: 22.3, y: 49.09), controlPoint2: CGPoint(x: 23.89, y: 65.71))
        pathPath.addCurve(to: CGPoint(x: 24.26, y: 98.75), controlPoint1: CGPoint(x: 24.74, y: 83.12), controlPoint2: CGPoint(x: 24.6, y: 96.88))
        pathPath.addCurve(to: CGPoint(x: 23.24, y: 102.25), controlPoint1: CGPoint(x: 24.13, y: 99.42), controlPoint2: CGPoint(x: 23.68, y: 101))
        pathPath.addCurve(to: CGPoint(x: 19.8, y: 118.93), controlPoint1: CGPoint(x: 21.4, y: 107.58), controlPoint2: CGPoint(x: 19.81, y: 115.29))
        pathPath.addLine(to: CGPoint(x: 19.8, y: 120.96))
        pathPath.addLine(to: CGPoint(x: 21.17, y: 121.41))
        pathPath.addCurve(to: CGPoint(x: 45.84, y: 124.85), controlPoint1: CGPoint(x: 27.05, y: 123.37), controlPoint2: CGPoint(x: 34.46, y: 124.4))
        pathPath.addLine(to: CGPoint(x: 49.74, y: 125))
        pathPath.addCurve(to: CGPoint(x: 50.69, y: 28.09), controlPoint1: CGPoint(x: 50.28, y: 92.28), controlPoint2: CGPoint(x: 50.84, y: 55.99))
        pathPath.addLine(to: CGPoint(x: 50.69, y: 28.09))
        pathPath.close()
        fillColor2.setFill()
        pathPath.fill()
        strokeColor.setStroke()
        pathPath.lineWidth = 0.5
        pathPath.miterLimit = 4
        pathPath.stroke()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
